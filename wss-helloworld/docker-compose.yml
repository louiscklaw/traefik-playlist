services:
  reverse-proxy:
    # The official v2 Traefik docker image
    image: traefik:latest
    # Enables the web UI and tells Traefik to listen to docker
    # command: --api.insecure=true --providers.docker
    ports:
      # The HTTP port
      - '80:80'
      - '443:443'

      # The Web UI (enabled by --api.insecure=true)
      - '8080:8080'

    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - '--log.level=INFO'
      - '--global.checkNewVersion=true'
      - '--global.sendAnonymousUsage=false'
      - '--api.insecure=true'
      - '--providers.docker=true'
      - '--providers.docker.exposedbydefault=false'

      - '--entrypoints.web.address=:80'
      - '--entrypoints.websecure.address=:443'

      - '--certificatesresolvers.myresolver.acme.tlschallenge=true'
      #- "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - '--certificatesresolvers.myresolver.acme.email=${EMAIL}'
      - '--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json'

  wss-test-host:
    build: wss-test-host
    ports:
      - 3000:3000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.helloworld-ws.rule=Host(`wss.docker.localhost`)"
      - 'traefik.http.routers.helloworld-ws.entrypoints=web'
      - 'traefik.http.routers.helloworld-ws.middlewares=helloworld-wss'
      - 'traefik.http.middlewares.helloworld-wss.redirectscheme.scheme=https'

      - 'traefik.http.routers.helloworld-wss.rule=Host(`wss.docker.localhost`)'
      - 'traefik.http.routers.helloworld-wss.entrypoints=websecure'
      - 'traefik.http.routers.helloworld-wss.tls.certresolver=myresolver'

      - "traefik.tcp.services.helloworld-wss.loadbalancer.server.port=3000"

  whoami:
    # A container that exposes an API to show its IP address
    image: traefik/whoami
    labels:
      - 'traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)'
